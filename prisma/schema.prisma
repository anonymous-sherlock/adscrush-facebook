// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  isOnboarded     DateTime?
  role            UserRole    @default(USER)
  accounts        Account[]
  onboarding      Onboarding?
  documents       Document[]
  payments        Payment[]
  wallet          Wallet?
  dailyBonusLimit Int         @default(50)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@fulltext([name])
}

enum UserRole {
  ADMIN
  USER
}

model Wallet {
  id        String    @id @default(cuid())
  balance   Float     @default(0)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("wallet")
}

model Payment {
  id        String         @id @default(cuid())
  amount    Float
  type      Payment_Type   @default(Withdraw)
  status    Payment_Status @default(PENDING)
  txid      String         @unique @default(uuid())
  user      User?          @relation(fields: [userId], references: [id])
  userId    String?
  wallet    Wallet         @relation(fields: [walletId], references: [id])
  walletId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum Payment_Type {
  Deposit
  Withdraw
}

enum Payment_Status {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model Onboarding {
  id                    String            @id @default(cuid())
  name                  String
  email                 String
  phone                 String
  dob                   DateTime
  facebook_username     String
  facebook_password     String
  facebook_profile_link String
  emailVerified         DateTime?
  user                  User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String?           @unique
  documents             Document[]
  status                Onboarding_Status @default(Hold)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@fulltext([name, phone])
  @@map("onboardings")
}

enum Onboarding_Status {
  Verified
  Declined
  Hold
}

model Document {
  id           String           @id @default(cuid())
  name         String
  documentType Document_ID_TYPE
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  files        Files[]
  onboarding   Onboarding       @relation(fields: [onboardingId], references: [id], onDelete: Cascade)
  onboardingId String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@map("documents")
}

model Files {
  id               String    @id @default(uuid())
  name             String
  size             Int
  type             String
  url              String
  originalFileName String
  uploadPath       String?
  createdAt        DateTime  @default(now())
  Document         Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId       String?

  @@map("files")
}

enum Document_ID_TYPE {
  PRIMARY
  ALTERNATE
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model OnboardingEmailVerification {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String
  expires DateTime

  @@unique([email, token])
  @@map("onboarding_email_verification")
}
